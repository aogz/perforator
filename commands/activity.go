package commands

import (
	"fmt"
	"strings"
	"time"

	"github.com/aogz/perforator/gh"
	"github.com/aogz/perforator/openai"
	"github.com/aogz/perforator/utils"
	"github.com/google/go-github/v40/github"
)

// UsersActivity returns activity generated by a user
func UsersActivity(args utils.DefaultArgs, sinceDaysAgo int, explain bool) {
	client := gh.GetClient()
	for i, contributor := range args.Contributors {
		activity, err := gh.GetActivity(client, contributor)
		if err != nil {
			fmt.Println(err.Error())
			return
		}

		timeDelta := -24 * time.Hour * time.Duration(sinceDaysAgo)
		sinceWithTime := time.Now().Add(timeDelta)
		since := time.Date(sinceWithTime.Year(), sinceWithTime.Month(), sinceWithTime.Day(), 0, 0, 0, 0, time.Local)

		fmt.Printf("%d: Activity from %s since %s\n", i+1, contributor, since)
		prReviews := []string{}
		issuesCreated := []string{}
		prsMerged := []string{}
		commits := []string{}
		for _, event := range activity {
			if fmt.Sprintf("%s/%s", args.Owner, args.RepoName) != *event.Repo.Name {
				continue
			}

			payload, err := event.ParsePayload()
			if err != nil {
				fmt.Println(err.Error())
				continue
			}

			// check since
			if (*event.CreatedAt).Before(since) {
				break
			}

			if *event.Type == "PullRequestReviewEvent" {
				prReviews = append(prReviews, *payload.(*github.PullRequestReviewEvent).PullRequest.Title)
			} else if *event.Type == "IssuesEvent" {
				issuesCreated = append(issuesCreated, *payload.(*github.IssuesEvent).Issue.Title)
			} else if *event.Type == "PullRequestEvent" {
				prsMerged = append(prsMerged, *payload.(*github.PullRequestEvent).PullRequest.Title)
			} else if *event.Type == "PushEvent" {
				for _, commit := range payload.(*github.PushEvent).Commits {
					if !strings.Contains(*commit.Message, "Merge pull request") {
						commits = append(commits, *commit.Message)
					}
				}
			}
		}

		allActivity := ""
		allActivity += utils.PrintList("PRs Merged", prsMerged)
		allActivity += utils.PrintList("PR Reviews", prReviews)
		allActivity += utils.PrintList("Issues Created", issuesCreated)
		allActivity += utils.PrintList("Commits", commits)

		fmt.Println(allActivity)

		if explain {
			request := fmt.Sprintf("This is my github activity from the previous day: %s. Rewrite it in a human-readable format for daily standup.", allActivity)
			response, err := openai.DaVinciRequest(request)
			if err != nil {
				fmt.Println(err.Error())
			} else {
				fmt.Println("#######")
				fmt.Println(response)
			}
		}
	}
}
